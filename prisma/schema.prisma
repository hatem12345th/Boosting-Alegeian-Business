generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model user {
  userID        Int            @id @default(autoincrement())
  username      String         
  email         String         @unique
  role          String
  passwordHash  String
  problems      Problem[]      @relation("UserProblems")
  proposals     Proposal[]     @relation("UserProposals")
  payments      Payment[]      @relation("UserPayments")
  notifications Notification[]
  messages      Message[]      @relation("UserMessages")
  deals         Deal[]         @relation("UserDeals")
}

model Problem {
  problemID     Int            @id @default(autoincrement())
  title         String
  description   String
  category      String
  budget        Float
  status        String
  attachments   String? // File paths or URLs to attachments
  userID        Int
  user          user           @relation("UserProblems", fields: [userID], references: [userID])
  proposals     Proposal[]
  notifications Notification[]
  dealID        Int?
  deal          Deal?
}

model SolutionProvider {
  providerID       Int        @id @default(autoincrement())
  name             String
  description      String
  expertise        String
  portfolio        String
  rating           Float
  problemAlignment String
  technologiesUsed String
  teamExperience   String
  teamNumber       Int
  createdDate      DateTime
  startReview      Float
  proposals        Proposal[] @relation("ProviderProposals")
  messages         Message[]  @relation("ProviderMessages")
  deals            Deal[]
}

model Proposal {
  proposalID         Int              @id @default(autoincrement())
  userID             Int
  problemID          Int              @unique
  details            String
  financialOffer     Float
  user               user             @relation("UserProposals", fields: [userID], references: [userID])
  problem            Problem          @relation(fields: [problemID], references: [problemID])
  solutionProviderID Int
  solutionProvider   SolutionProvider @relation("ProviderProposals", fields: [solutionProviderID], references: [providerID])
}

model Payment {
  paymentID Int    @id @default(autoincrement())
  userID    Int
  amount    Float
  currency  String
  status    String
  user      user   @relation("UserPayments", fields: [userID], references: [userID])
  deals     Deal[] @relation("PaymentDeals")
}

model Notification {
  notificationID Int      @id @default(autoincrement())
  message        String
  date           DateTime @default(now())
  userID         Int
  user           user     @relation(fields: [userID], references: [userID])
  problemID      Int?
  problem        Problem? @relation(fields: [problemID], references: [problemID])
  dealID         Int?
  deal           Deal?    @relation(fields: [dealID], references: [dealID])
}

model Deal {
  dealID             Int              @id @default(autoincrement())
  problemID          Int              @unique
  solutionProviderID Int
  status             String
  communication      Message[]
  notifications      Notification[]
  problem            Problem          @relation(fields: [problemID], references: [problemID])
  solutionProvider   SolutionProvider @relation(fields: [solutionProviderID], references: [providerID])
  payments           Payment[]        @relation("PaymentDeals")
  users              user[]           @relation("UserDeals")
}

model Message {
  messageID  Int              @id @default(autoincrement())
  senderID   Int
  receiverID Int
  content    String
  timestamp  DateTime         @default(now())
  sender     user             @relation("UserMessages", fields: [senderID], references: [userID])
  receiver   SolutionProvider @relation("ProviderMessages", fields: [receiverID], references: [providerID])
  dealID     Int?
  deal       Deal?            @relation(fields: [dealID], references: [dealID])
}
